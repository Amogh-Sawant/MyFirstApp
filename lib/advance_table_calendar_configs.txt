// above widget build buttons line 202

// More advanced TableCalendar configuration (using Builders & Styles)
// Widget _buildTableCalendarWithBuilders() {
//   return TableCalendar(
//     locale: 'pl_PL',
//     calendarController: _calendarController,
//     events: _events,
//     holidays: _holidays,
//     initialCalendarFormat: CalendarFormat.month,
//     formatAnimation: FormatAnimation.slide,
//     startingDayOfWeek: StartingDayOfWeek.sunday,
//     availableGestures: AvailableGestures.all,
//     availableCalendarFormats: const {
//       CalendarFormat.month: '',
//       CalendarFormat.week: '',
//     },
//     calendarStyle: CalendarStyle(
//       outsideDaysVisible: false,
//       weekendStyle: TextStyle().copyWith(color: Colors.blue[800]),
//       holidayStyle: TextStyle().copyWith(color: Colors.blue[800]),
//     ),
//     daysOfWeekStyle: DaysOfWeekStyle(
//       weekendStyle: TextStyle().copyWith(color: Colors.blue[600]),
//     ),
//     headerStyle: HeaderStyle(
//       centerHeaderTitle: true,
//       formatButtonVisible: false,
//     ),
//     builders: CalendarBuilders(
//       selectedDayBuilder: (context, date, _) {
//         return FadeTransition(
//           opacity: Tween(begin: 0.0, end: 1.0).animate(_animationController),
//           child: Container(
//             margin: const EdgeInsets.all(4.0),
//             padding: const EdgeInsets.only(top: 5.0, left: 6.0),
//             color: Colors.deepOrange[300],
//             width: 100,
//             height: 100,
//             child: Text(
//               '${date.day}',
//               style: TextStyle().copyWith(fontSize: 16.0),
//             ),
//           ),
//         );
//       },
//       todayDayBuilder: (context, date, _) {
//         return Container(
//           margin: const EdgeInsets.all(4.0),
//           padding: const EdgeInsets.only(top: 5.0, left: 6.0),
//           color: Colors.amber[400],
//           width: 100,
//           height: 100,
//           child: Text(
//             '${date.day}',
//             style: TextStyle().copyWith(fontSize: 16.0),
//           ),
//         );
//       },
//       markersBuilder: (context, date, events, holidays) {
//         final children = <Widget>[];

//         if (events.isNotEmpty) {
//           children.add(
//             Positioned(
//               right: 1,
//               bottom: 1,
//               child: _buildEventsMarker(date, events),
//             ),
//           );
//         }

//         if (holidays.isNotEmpty) {
//           children.add(
//             Positioned(
//               right: -2,
//               top: -2,
//               child: _buildHolidaysMarker(),
//             ),
//           );
//         }

//         return children;
//       },
//     ),
//     onDaySelected: (date, events, holidays) {
//       _onDaySelected(date, events, holidays);
//       _animationController.forward(from: 0.0);
//     },
//     onVisibleDaysChanged: _onVisibleDaysChanged,
//     onCalendarCreated: _onCalendarCreated,
//   );
// }

// Widget _buildEventsMarker(DateTime date, List events) {
//   return AnimatedContainer(
//     duration: const Duration(milliseconds: 300),
//     decoration: BoxDecoration(
//       shape: BoxShape.rectangle,
//       color: _calendarController.isSelected(date)
//           ? Colors.brown[500]
//           : _calendarController.isToday(date)
//               ? Colors.brown[300]
//               : Colors.blue[400],
//     ),
//     width: 16.0,
//     height: 16.0,
//     child: Center(
//       child: Text(
//         '${events.length}',
//         style: TextStyle().copyWith(
//           color: Colors.white,
//           fontSize: 12.0,
//         ),
//       ),
//     ),
//   );
// }

// Widget _buildHolidaysMarker() {
//   return Icon(
//     Icons.add_box,
//     size: 20.0,
//     color: Colors.blueGrey[800],
//   );
// }

// Widget _buildButtons() {
//   final dateTime = _events.keys.elementAt(_events.length - 2);

//   return Column(
//     children: <Widget>[
//       Row(
//         mainAxisSize: MainAxisSize.max,
//         mainAxisAlignment: MainAxisAlignment.spaceEvenly,
//         children: <Widget>[
//           RaisedButton(
//             child: Text('Month'),
//             onPressed: () {
//               setState(() {
//                 _calendarController.setCalendarFormat(CalendarFormat.month);
//               });
//             },
//           ),
//           RaisedButton(
//             child: Text('2 weeks'),
//             onPressed: () {
//               setState(() {
//                 _calendarController
//                     .setCalendarFormat(CalendarFormat.twoWeeks);
//               });
//             },
//           ),
//           RaisedButton(
//             child: Text('Week'),
//             onPressed: () {
//               setState(() {
//                 _calendarController.setCalendarFormat(CalendarFormat.week);
//               });
//             },
//           ),
//         ],
//       ),
//       const SizedBox(height: 8.0),
//       RaisedButton(
//         child: Text(
//             'Set day ${dateTime.day}-${dateTime.month}-${dateTime.year}'),
//         onPressed: () {
//           _calendarController.setSelectedDay(
//             DateTime(dateTime.year, dateTime.month, dateTime.day),
//             runCallback: true,
//           );
//         },
//       ),
//     ],
//   );
// }
